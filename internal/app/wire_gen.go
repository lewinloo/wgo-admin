// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"gin_template/internal/app/api"
	"gin_template/internal/app/api/handler"
	"gin_template/internal/app/domain/repository"
	"gin_template/internal/app/domain/service"
	"gin_template/internal/app/initialize"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func BuildInjector() (*Injector, func(), error) {
	db, cleanup, err := initialize.GormDB()
	if err != nil {
		return nil, nil, err
	}
	enforcer, cleanup2, err := initialize.Casbin(db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	client, cleanup3, err := initialize.Redis()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	logger, cleanup4, err := initialize.Log()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	helloHandler := &handler.HelloHandler{
		Redis: client,
		Log:   logger,
	}
	userRepository := &repository.UserRepository{
		DB: db,
	}
	roleRepository := &repository.RoleRepository{
		DB: db,
	}
	userService := &service.UserService{
		UserRepo: userRepository,
		RoleRepo: roleRepository,
		Log:      logger,
	}
	userHandler := &handler.UserHandler{
		UserSvc: userService,
	}
	menuRepository := &repository.MenuRepository{
		DB: db,
	}
	menuService := &service.MenuService{
		MenuRepo: menuRepository,
		RoleRepo: roleRepository,
		Log:      logger,
	}
	menuHandler := &handler.MenuHandler{
		MenuSvc: menuService,
	}
	roleService := &service.RoleService{
		MenuRepo: menuRepository,
		RoleRepo: roleRepository,
		Log:      logger,
	}
	roleHandler := &handler.RoleHandler{
		RoleSvc: roleService,
	}
	router := &api.Router{
		Casbin:       enforcer,
		HelloHandler: helloHandler,
		UserHandler:  userHandler,
		MenuHandler:  menuHandler,
		RoleHandler:  roleHandler,
	}
	engine := initialize.GinEngine(router)
	injector := &Injector{
		Engine: engine,
	}
	return injector, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var InjectorSet = wire.NewSet(wire.Struct(new(Injector), "*"))

type Injector struct {
	Engine *gin.Engine
}
